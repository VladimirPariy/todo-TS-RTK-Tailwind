import React, {ChangeEvent, FC, KeyboardEventHandler, useRef, useState} from 'react';import cl from "./UpdatingTitle.module.scss";import {AiOutlineCheck, AiOutlineClose} from "react-icons/ai";import {isUpdatingTodo, updatingTitleTodo} from "../../store/slice/todoSlice";import {isValidTodo} from "../../store/slice/validTodoSlice";import {useAppDispatch} from "../../hooks/useAppDispatch";// import {useTheme} from "../../hooks/useTheme";interface UpdatingFormProps {  isUpdating: boolean;  id: string;  title: string}const UpdatingTitle: FC<UpdatingFormProps> = ({isUpdating, id, title}) => {  const dispatch = useAppDispatch()  // const getContainerTodoClassName = useTheme('containerTodo', cl)  const inputRef = useRef<HTMLInputElement>(null)  const [taskValue, setTaskValue] = useState<string>(title)  const changeUpdatingHandler = (e: ChangeEvent<HTMLInputElement>) => {    setTaskValue(e.target.value)  }  const saveUpdatingHandler = (): void => {    if (taskValue.length > 0) {      dispatch(updatingTitleTodo({id, title: taskValue}))      return    }    dispatch(isValidTodo(false))  }  const clearUpdatingHandler = (): void => {    dispatch(isUpdatingTodo(id))    setTaskValue(title)  }  const keyDownUpdateHandler: KeyboardEventHandler<HTMLInputElement> = (e): void => {    if (e.key === 'Enter') saveUpdatingHandler()    if (e.key === 'Escape') clearUpdatingHandler()  }  return (    <div className={!isUpdating ? cl.none : cl.titleUpdating}>      <input type="text"             className={cl.updatingInput}             value={taskValue}             onChange={changeUpdatingHandler}             ref={inputRef}             onKeyDown={keyDownUpdateHandler}/>      <button onClick={saveUpdatingHandler}              className={cl.save}              children={<AiOutlineCheck/>}/>      <button onClick={clearUpdatingHandler}              className={cl.clear}              children={<AiOutlineClose/>}/>    </div>  );};export default UpdatingTitle;