import React, {ChangeEvent, Dispatch, FC, KeyboardEventHandler, SetStateAction, useEffect, useRef, useState} from 'react';import cl from "./UpdatingTitle.module.scss";import {AiOutlineCheck} from "react-icons/ai";import {IoMdTrash} from "react-icons/io";import {isUpdatingTodo, updatingTitleTodo} from "../../store/slice/todoSlice";import {isValidTodo} from "../../store/slice/validTodoSlice";import {useAppDispatch} from "../../hooks/useAppDispatch";import {useTheme} from "../../hooks/useTheme";interface UpdatingFormProps {  isUpdating: boolean;  id: string;  title: string;  taskValue: string;  setTaskValue: Dispatch<SetStateAction<string>>}const UpdatingTitle: FC<UpdatingFormProps> = ({isUpdating, id, title, taskValue, setTaskValue}) => {  const dispatch = useAppDispatch()  const getTitleUpdatingClassName = useTheme('titleUpdating', cl)  const textAreaRef = useRef<HTMLTextAreaElement>(null)  const changeUpdatingHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {    setTaskValue(e.target.value)  }  const saveUpdatingHandler = (): void => {    if (taskValue.trim().length > 0) {      dispatch(updatingTitleTodo({id, title: taskValue.trim()}))      return    }    setTaskValue('')    dispatch(isValidTodo(false))  }  const clearUpdatingHandler = (): void => {    dispatch(isUpdatingTodo(id))    setTaskValue(title)  }  const keyDownUpdateHandler: KeyboardEventHandler<HTMLTextAreaElement> = (e): void => {    if (e.key === 'Enter') saveUpdatingHandler()    if (e.key === 'Escape') clearUpdatingHandler()  }  useEffect(() => {    if (isUpdating) {      const l = textAreaRef.current?.value.length || 0      textAreaRef.current?.setSelectionRange(l, l)      textAreaRef.current?.focus()    }  }, [isUpdating])  useEffect(() => {    if (textAreaRef && textAreaRef.current) {      textAreaRef.current.style.height = "0px";      const scrollHeight = textAreaRef.current.scrollHeight;      textAreaRef.current.style.height = scrollHeight + "px";    }  }, [isUpdating]);  return (    <div className={!isUpdating ? cl.none : getTitleUpdatingClassName}>      <textarea        className={cl.updatingTextArea}        value={taskValue}        onChange={changeUpdatingHandler}        ref={textAreaRef}        onKeyDown={keyDownUpdateHandler}        onBlur={() => textAreaRef.current?.focus()}/>      <button onClick={saveUpdatingHandler}              className={cl.save}              children={<AiOutlineCheck/>}/>      <button onClick={clearUpdatingHandler}              className={cl.clear}              children={<IoMdTrash/>}/>    </div>  );};export default UpdatingTitle;